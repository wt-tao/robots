1、continue语句（用在循环体中，停止当前循环的执行，执行下一个循环，）
	嵌套循环中可用continue+标签名，指定执行
	for(var i=0;i<10;i++){
		alert(i);
		if(i==4) continue;			//继续执行下一次迭代
		alert(i)
	}
	
	以下将会成为死循环
	var i=0;
	while(i<10){
		alert(i);
		if(i==4) continue;		 //等于4时将变成死循环	
		alert(i)
	}
	
	eg：用continue过滤数组中的字符串元素
	var a=[1,'d',2,'b',3,'c',4,'d']
	var b=[],j=0;
	for(var i in a){
		if(typeof a[i] == 'string'){
			//如果元素数据类型为字符串，则返回继续下一次迭代
			continue;
			//将非字符串类型的元素赋值给数组
			b[j++]=a[i]
			
		}
	}
	alert(b)	//1,2,3,4
	
2、提升条件检测的性能
	使用switch语句检测值的方法比较笨重。可将所有可能值存储在数组中，然后通过下标快速检测到元素
	如果条件查询中健名不是有序数组，则无法与数组下标映射，这时可以使用对象成员查询
	
3、提升循环运算性能
		主要从性能角度考虑
			1、压缩做什么
			2、降低迭代次数
			
	一个数组处理循环可采用三种（for、while、do while）
	for循环中把数组长度给缓存起来，把变量与缓存数组长度进行比较，减省读取数组的开销
	js中倒叙循环可略微提高循环性能
		eg:for(var i=items.length;i--){
			process(items[i])
		}

4、设计杨辉三角
		//设计算法
		function c(x,y){		//求指定行和列的数字，x：行数，y：列数
			if((y==1)||(y==x+1)) return 1;	//若是第一列或最后一列，则取值为1
			return c(x-1,y-1)+c(x-1,y)		//通过递增算法求指定行和列的值，x-1表示上一行，
											//返回上一行中第y-1列与第y列值之和
		}
		
		//设计输出函数
		function print(v){
			if(typeof v == 'number'){
				var w=40;
				if(n>30){
					w=(n-30)+40;
				}
				var s='<span style="padding:4px 2px;display;liline-block;text-align:center;width:"+w+"px;">' +v+"</span>">'
				document.write(s)
			}
			else{
				document.write(v)
			}
		}
		var n=prompt('请输入幂数：'，9)；
		n=n-0；
		
		var t1=new Date()
		
		var a1=[1,1],a2=[1,1]
		print('<div style="text-align:center;">');
		for(var i =1;i<n;i++){		//遍历幂数
			for(var j=0;j<i+2;j++){		//遍历每一列
				print(c(i,j))		//调用求值函数，输出每一个数字
			}
			print("<br />")		//换行
		}
		print("</div>")
		
		var t2=new Date();
		print('<p style="text-align:center">耗时为（毫秒）：'+(t2-t1)+'</p>')
	
5、构造数组（array）
	var a= new Array() //括号内可直接赋值，也可以为数字，为数组长度
6、数组直接量 （定义数组的一种快捷方式）
	var a=[]		//空数组，[数组列表，由逗号隔开]
7、存取数组元素
	//赋值
	var a=[];
	a[0]=1,
	a[2]=2,
	//取值
	var a=new Array();
	for(var i=0;i<10;i++){	//循环为数组元素赋值
		a[i++]=++i
	}
	alert(a) 返回2,,,5,,,8,,,11
	eg:
	var a=[1,2,3]//声明数组直接量
	alert(a[true]);//undefined  说明a不是只想数组a，而是指向对象a
	var a={		//声明对象直接量
		"true":1
	}
	alert(a[true]);//1说明a是指向对象a，并读取属性true的值
	
8、数组长度(可以动态改变)
	Array.length:获取数组长度（下标）
	var a=[]//声明空数组
	var[2]=1;
	var[100]=2//为下标100的元素赋值
	for（var i in a）{	//遍历数组，仅能读取两个元素，但是数组长度为101
		alert(a[i])
	}
	alert(a.length)//101
	a[200]=200
	alert(a.length)//201
	要注意下标越界
	var a=[1,2,3]
	a.length=5	//增长数组长度
	alert(a[4])	//undefined  ,还没赋值
	a.length=2	//缩短数组长度
	alert(a[2])	//undefined  ,已丢失
	
9、对象和数组（不同类型数据，引用型数据）都是数据存储集合，方式不同
	var a={			对象（又称关联数组，但是不是真正意义的数组，就是将值与特定字符关联在一起，无法继承Array的方法）
		x:1,
		y:true,
	}
	var a=[			数组  继承Array
		1,
		true,
	]
	
10、定义多维数组（JS不支持，可以数组嵌套）
	var a[
		[1,2,3],
		[4,5,6]
	]
	alert(a[1][2])		//6,[1]是外围数组下标，后面则是内围下标
	alert(a[2][2])		//报错，数组下标越界
	
	eg：利用循环来定义二维数组
	var a=[]					//二维数组
	for(var i=0;i<10;i++){		//行循环
		var b=[];				//辅助数组
		for(var j=0;j<10;j++){	//列循环
			b[j]=i*10+j+1;		//定义数组b的元素值
		}
		a[i]=b;					//把数组b辅助给数组a
	}
	alert(a)					//返回1到100的二维数组
	
11、检索数组（一般利用循环）
	eg：
	var a=[1,2,'123','a']
	for(var i in a){
		if(typeof == 'string'){  //检索字符串的值，
			alert(a[i])
		}
	}
12、操作元素
	增删元素
	删：delete  仅删除值，不清空下标
	push：可以包含多个值，添加到数组尾部，返回数组长度
	pop：删除尾部元素，改变数组长度
	shift：将数组从头部移除第一个元素，后面的元素往前推，只删除一个，返回元素值
	unshift：在头部插入一个或多个元素	返回添加后的数组长度
	
	
	可以模拟栈操作
	a=[0]
	a.unshift(1,2)
	alert(a)		//1,2,0
	
	a.unshift(1)
	a.unshift(2)
	alert(a)		//2,1,1,2,0   最后添加的在最前面
	
	eg：
	var a=[1,2,3,4,5]
	for(var i in a){
		var t=a.pop();		//先出，把出去的值暂时保存
		a.unshift(t*10)		//先进，把出去的元素放大10倍再进
	}
	alert(a)		//10,20,30,40,50
	
	
	concat:把参数值连接到现有数组尾部（同push差不多）
	push是在原有的数组上，而concat返回一个新数组，不会影响原数组
	var a=[1,2,3]
	var b=a.center(4,5)
	alert(b)		//1,2,3,4,5
	var	b=a.push(4,5)
	alert(b)		//8
	
13、操作子数组
	splice:删除或插入一部分元素
	slice：返回数组一部分，即截取
	
	var a=[1,2,3,4,5]
	a.splice(2)
	alert(a)	//[1,2]
	a.splice(2,2)	//（起始位置 删除几个元素）
	alert(a)	//[1,2,5]
	a.splice(2,0，0，0)	//（起始位置 删除/添加几个元素，添加的元素）
	alert(a)	//[1,2,5]
	如果起始位置，则是在尾部插入
	为负值则是从尾部前面的第几个开始操作
	
	slice(起始下标，终止下标) 负值则是倒数
	
14、数组排序
	rayerse：颠倒数组元素
	sort:对数组元素进行排序(可以根据数字或字母，或者某个排序函数进行排序)对自身进行排序，不会返回新数组
	
	var a=[1,2,3]
	alert(a.reverse())	//[3,2,1]
	
	var a=['a','d','b','c']
	a.sort()
	alert(a)	//[a,b,c,d]
	
	var a=['aba','baa','aab']
	a.sort()
	alert(a)	//['aab','aba','baa']
	
15、使用排序函数：灵活进行数组排序
	
	function f(a,b){
		return -(a-b)		//返回比较参数
	}
	var a=[3,1,2,4,5,7,6,8,0,9]
	a.sort()		//根据数字大小从小到大排序
	alert(a)	//0,1,2,3,4,5,6,7,8,9
	
	a.sort(f)		
	alert(a)	//9,8,7,6,5,4,3,2,1,0
	
	奇偶性重排
	function f(a,b){
		//获取奇偶性
		var a=a%2;		
		var b=b%2
		a为偶数，排左，b为偶，排右
		if(a==0) return 1;
		if(b==0) return -1;
	}
	
	a.sort(f)		
	alert(a)	//3,1,5,7,9,2,4,6,8,0
	
16、数组与字符串转换
	tostring：数组转字符串（不常用）
	join：把数组元素连接构建一个字符串（可以定义连字符）
	split("==") ：按照指定符号分隔字符串转换为数组
	var a=[1,2,3]
	var s=a.tostring()
	alert( typeof s)  //string
	
	
	var s=a.toLocalestring()  本地转换
	alert(s)  //1.00,2.00,3.00
	
	
	var s=a.join("==")
	alert(s)  //1==2==3
	
	
	
	var a="1==2==3"
	var	s=a.split("==") //按照指定符号分隔字符串转换为数组
	alert(s)  //[1,2,3]
	alert(s)
	
17、数组元素的定位
	indexOf() 第一个参数是要匹配的元素值，第二个是起始下标  从左到右
	lastIndexOf()		是从右往左检索
	document.write(a.indexOf("2",1)) //2   没有就返回-1 
	
20、迭代
	forEach:为每个元素调用回调函数(不会影响数组的每个元素，但是每个元素会调用这个回调函数)
	every:检查所有元素符合条件
	some：检查是否有符合条件的元素（在每个元素调用回调元素，根据是否返回值来确定，与every相反）
	map：为每个元素调用回调函数，并返回包含结果的数组（新数组为返回值组成）
	filter：过滤不符合的元素（返回不符合的数组）
	
	array.forEach(调用回调函数，对象)（callbackfn[,thisArg]）
	
	function callbackfn(value,index,array)(元素值，下班，数组)
	
	eg：
	function ShowResults(value,index,array){
		document.write('value:'+value+' ')
		document.write('index:'+index+' ')
		document.write('<br />')
	}
	var letters=['a','b','c']
	letters.forEach(ShowResults)
	/*
	value:a index:0
	value:b index:1
	value:c index:2
	*/
	
	eg：
	var numbers=[10,11,12];
	var sum=0;
	numbers.forEach(
		function addNumber(value){
			sum+=value
		}
	)
	document.write(sum)		//33
	
21、合并数组	
	reduce	左到右
	reduceRight	右到左

	array.reduce(回调函数，初始值)（callbackfn[,initialValue]）
	
	function callbackfn(previousValue,currentValue,currentIndex,array)(元素值，下班，数组)
	
	eg：
		function appendCurrent(previousValue,currentValue){
			return previousValue + '::' + currentValue
		}
		value elemrnts = ['abc','def',123,456]
		var result = elemrnts.reduce(appendCurrent);
		document.write(result)		//abc::def::123::456
	
22、快速交换（变量值）
	一般需中间变量
	这样则不需要
	var a=10,b=20
	a=[b,b=a][0];
	
23、数组下标（大于等于0的整数）
	var a=[];
	a[-1]=1
	alert(a.length)		//0
	alert(a[-1])		//1
	alert(a['-1'])
	
24、扩展数组
	使用原型方法，在构造器的基础上访问原型对象，在原型对象上定义方法
	
		Array.prototype._sum = Array.prototype.sum ||	//检测是否存在同名方法
			(Array.prototype.sum = function(){
				var _n = 0;			//临时汇总变量
				for(var i in this){
					if(this[i] = parseFloat(this[i])) _n += this[i]
					//若数组元素为数字，进行累加
				};
				return _n  //返回累加的值
			})
			Object.prototype.sum = Array .prototype._sum
			//把数组临时原型方法赋值给对象的原型方法sum()
			
			var a = [1,2,3,4,5,"6"]
			alert(a.sum()); //21


25、设计迭代器（迭代器：对数据集合进行枚举操作的机制）
	
	Array.prototype.each = function(f){ //数组迭代器，扩展Array原型方法
		try{		//异常处理，避免因为不可预测导致系统崩溃
			this.i || (this.i = 0); //定义临时变量，用来作为迭代器计数器
			if(this.length > 0 && f.constructor == Function){
				while(this.i < this.length){	//遍历数组
					var e = this[this.i];	//获取当前元素
					if(e && e.constructor == Array){
						//若元素存在，且为数组
						e.each(f)		//递归调用迭代器
					}else{     //否则，在元素上调用参数函数，并把元素值传递给函数
						f.apply(e,[e]);
					}
					this.i ++;  		//递加计数器
				}
				this.i = null;		//如果遍历完毕，则清空计数器
			}
		}
		catct(w){		//捕获以后
		}
		return this		//返回当前数组
	}
	var a = [1,[2,[3,4]]]
	var f = function(x){
		alert(x)
	}
	a.each(f)

26、使用数组维度
	定义工具
	Array.dim = function(dimension,initial){
		var a=[],i;
		for(i = 0;i < dimension;i += 1){
			a[i] = initial;
		}
		return a;
	};
	var myArray = Array.dim(100,0);
		alert(myArray) //下标为100的元素为0的数组
	
	var matrix = [
		[0,1,2],
		[3,4,5],
		[6,7,8]
	];
	matrix[2][i]  //7
	
	for(i = 0;i < n;i += 1){
		myArray[i] = [];
	}

	
	Array.matrix = function(m,n,initial){
		var a,i,j,mat = [];
		for(i = 0; i < m;i += 1){
			a = [];
			for(j = 0; j < n;j += 1){
				a[j] = initial;
			}
			mat[i] = a;
		}
		return mat;
	};
	var myMatrix = Array.matrix(5,5,0);
	document.write(myMatrix[2][4]);	//0













	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	