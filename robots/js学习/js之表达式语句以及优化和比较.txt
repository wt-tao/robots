1、表达式语句
	赋值语句      为变量克隆值
	函数调用语句
	方法调用语句
	属性赋值语句  为对象变量克隆值
	
	必须有一个返回值  没有则undefined
	组成分析：由运算数和运算符构成
	由命令、关键字和表达式（可以有空格分隔）构成  语句又分号分隔

	表现分析：静态的   语句是动态的
	
2、复合语句：多个单句放在一起，由大括号包裹构成
	{
	alert('hello')
	alert('world')
	}
	
	也可以复合语句嵌套
3、声明语句（变量声明和标签声明）：可以重叠，不会冲突
	变量声明：变量声明（使用var）和函数声明(使用function)  在预编译期，提前建立索引表

4、空语句
	不会产生任何作用和任何操作（相当于占位符）
	循环语句中加上空语句使其空转
	
5、if语句（条件语句）
	if（条件）{满足条件时执行函数}
	
	还有
	if（条件）{
	满足条件时执行函数
	}else{
	不满足条件时执行函数
	}
6、条件嵌套
	注意层次关系，避免逻辑混乱
	if（0）{
	if（1）{
		满足条件1与0时执行函数
		}else{
	不满足条件1满足0时执行函数
	}	
		满足条件0时执行函数
	}else{
	不满足条件时0执行函数
	}
7、设计分支结构
	优化条件结构
	if（a）{
		if（b）{
			alert('都满足')
		}else{
		alert('满足1不满足0')
		}	
		alert('满足0')
	}else{
		alert('都不满足')
	}
	优化后
	if（a&&b）{
		alert('都满足')
	}
	var t=true
	if(!a){
		alert('a不成立')
		t = false
	}
	if(!b){
		alert('b不成立')
		t = false
	}
	if(t){
	alert('都成立')
	}

8、switch语句
	switch(值){
		case 值1:
				满足执行语句;
				brack;
		case 值2:
				满足执行语句	
				brack;
		defult:
				不满足执行语句
				brack;
		}
9、defalut从句 （为switch语句的一个可选语句，可放任意位置）
	用来处理特殊任务，或者正常条件下无法处理的任务（异常枚举）
	
10、if与switch的比较
				if （灵活） 					switch（执行效率高）
	结构		通过嵌套结构实现多重分支		专为多重分支设计
	条件		可以测试多个条件表达式			仅能测试一个条件表达式
	逻辑关系	可以处理复杂的逻辑关系			仅能够处理多个枚举的逻辑关系
	数据类型	可适用任何数据类型				仅能应用整数、枚举、字符串等类型数据
	
	表现逻辑关系，根据逻辑关系来决定使用语句
	使代码更方便阅读

11、优化分支结构
	考虑因素：
	1、尽量降低条件表达式的检测次数，提高效率
	2、在多重分支中，根据每个分支出现的次数，多次的放在前面，降低检测次数
		switch(leave){
		case 1:
				alert("普通会员");
				brack;
		case 2:
				alert("管理员");	
				brack;
		defult:
				alert("请登录");
				brack;
		}
		
		根据顺序
		switch(day){
		case 1:
				alert("周一安排");
				brack;
		case 2:
				alert("周二安排");	
				brack;
		defult:
				alert("异常处理");
				brack;
		}
	3、与客户端结合应用时，可以实现预存，在条件表达式中进行预处理，避免从0处理，避免浪费大量时间
	eg:当两个条件a与b，a多为真，b为必须执行的表达式，逻辑程序设计就欠妥当
	if（a && b）{
		//执行任务
	}
	
	var c = b
	if（a && b）{
		//执行任务
	}
	
12、while语句(先检测条件，再循环)
	while (条件){
		条件为true重复执行的代码块
	}
	为false跳出
	避免使用死循环，
	eg:
	var n = 0;
	先比较在自加
	while(n++ < 10){
		alert(n)
		}
13、do while语句（类似if else）先执行再循环
	必须执行一次
	末尾必须用分号表示结束
	
	do{
		执行语句
	}while(条件){
	执行语句
	}
	
	eg:
	var n = 0;
	do{
		n++;
		alert(n)
	}while(n<10);
	
14、for语句（优化的循环结构）
	for（初始化变量表达式;循环范围;递增变量表达式）{
		执行的循环体结构
	}
	更为紧凑，不容易出错
	for(var n = 1;n < 11;n++){
		alert(n)
	}
	for(var n = 1,m = 1;n < 11,m < 11;n++;m++){
		alert(n)
		alert(m)
	}
15、for in语句（快速实现批量转化）
	for（ [var] 变量 in < object | 表达式（array）>）{
		执行的循环体结构
	}
	eg:
	var a = [1,true ,'abc',false]
	for(var b in a){
		alert(b);			//显示枚举中临时变量值
		alert(a[b]);		//显示每个元素的值
	}
	
	var a = [1,true ,'abc',false]
	var b = 0;
	while(b < a.length){
		alert(b);			
		alert(a[b]);		
		b++;			//不能忘
	}
	
	eg：
	for（var i = 0 in document）{
		document.write('document.' + i + '=' + document[i]);
		document.write('<br />')
	}
16、比较while与for
	for语句结构初始化循环变量、循环条件，递增变量放在一起，比较严谨
		循环三要素作为基本表达式放在语法中，避免忽略和出错，用分号分隔
	
	while则是初始化变量放签了，中间放条件，递增变量放循环语句中，比较松散  
	
	
17、优化循环结构（最浪费资源，必须优化）
	结构优化
		var a = true
		for(var b= 1;b<10;b++){
			if(a==true){
				alert(b)
			}
		}
		优化:避免不必要的操作
		if（a ==true）{
			for(var b= 1;b<10;b++){
					alert(b)
			}
		}
		静态信息可以放在循环体外，提升运行效率
		
	妥善定义循环变量
		可以在循环体内定义变量，节省资源，降低代码冗余
		
		
18、标签语句（作为表示：指定的路标）
	标签名（不要使用保留字）：语句
	eg:
	b:{a:true}    b为标签名 a就是对象的属性名
	alert(b.a)  不能使用标签语句的标记名来引用被标签的属性
	
19、break：终止循环
	可以brack a  跳到a标签的内容内（只能在一个循环体内跳）
	不能一个循环体跳到另一个循环体
	
	
	
	
	
	
	
	
	
	
	
	
	